{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Glove loaded.\n",
      "Success: Data loaded into dataframe.\n"
     ]
    }
   ],
   "source": [
    "import re, sys, math, json, os, urllib.request\n",
    "import numpy as np                                \n",
    "import pandas as pd                               \n",
    "import matplotlib.pyplot as plt                   \n",
    "from IPython.display import Image                 \n",
    "from IPython.display import display               \n",
    "from time import gmtime, strftime                 \n",
    "\n",
    "try:\n",
    "  model_data = pd.read_json('data.json',\n",
    "                        lines=True,\n",
    "                        orient='columns')\n",
    "  glove_file = open('glove.6B.100d.txt', encoding = \"utf8\")\n",
    "  print('Glove loaded.')\n",
    "  print('Success: Data loaded into dataframe.')\n",
    "except Exception as e:\n",
    "    print('Data load error: ',e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>annotation</th>\n",
       "      <th>extras</th>\n",
       "      <th>metadata</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>an,title</td>\n",
       "      <td>{'labels': ['N/A'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529677325000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>STARKY0020180125ee1o0001i,Raila has crossed th...</td>\n",
       "      <td>{'labels': ['N/A'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529758904000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>MTPW000020180409ee4900899,Political risk remai...</td>\n",
       "      <td>{'labels': ['N/A'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529688087000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>AFNWS00020171114edbe0018o,You Can Still Have Y...</td>\n",
       "      <td>{'labels': ['N/A'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529587470000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>JMATH00020171219edcj0008f,Fuzzy Logic; Studies...</td>\n",
       "      <td>{'labels': ['N/A'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529659936000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14450</td>\n",
       "      <td>DALYIG0020171214edce000jw,\"Nigeria Spends N43t...</td>\n",
       "      <td>{'labels': ['Not Distress'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529646472000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14451</td>\n",
       "      <td>SNLMMDW020171214edcd0000b,Intrepid Mines selli...</td>\n",
       "      <td>{'labels': ['Not Distress'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529670790000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14452</td>\n",
       "      <td>DJDN000020171211edcb001dd,Global Commodities R...</td>\n",
       "      <td>{'labels': ['Not Distress'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529669474000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14453</td>\n",
       "      <td>BUSIDA0020180403ee4300003,\"Equity, Stanbic top...</td>\n",
       "      <td>{'labels': ['Not Distress'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529601535000, 'last_updated...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14454</td>\n",
       "      <td>ICROWDN020180226ee2q0008f,\"Solar Glass Market ...</td>\n",
       "      <td>{'labels': ['Not Distress'], 'note': ''}</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'first_done_at': 1529589340000, 'last_updated...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14455 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 content  \\\n",
       "0                                               an,title   \n",
       "1      STARKY0020180125ee1o0001i,Raila has crossed th...   \n",
       "2      MTPW000020180409ee4900899,Political risk remai...   \n",
       "3      AFNWS00020171114edbe0018o,You Can Still Have Y...   \n",
       "4      JMATH00020171219edcj0008f,Fuzzy Logic; Studies...   \n",
       "...                                                  ...   \n",
       "14450  DALYIG0020171214edce000jw,\"Nigeria Spends N43t...   \n",
       "14451  SNLMMDW020171214edcd0000b,Intrepid Mines selli...   \n",
       "14452  DJDN000020171211edcb001dd,Global Commodities R...   \n",
       "14453  BUSIDA0020180403ee4300003,\"Equity, Stanbic top...   \n",
       "14454  ICROWDN020180226ee2q0008f,\"Solar Glass Market ...   \n",
       "\n",
       "                                     annotation  extras  \\\n",
       "0               {'labels': ['N/A'], 'note': ''}     NaN   \n",
       "1               {'labels': ['N/A'], 'note': ''}     NaN   \n",
       "2               {'labels': ['N/A'], 'note': ''}     NaN   \n",
       "3               {'labels': ['N/A'], 'note': ''}     NaN   \n",
       "4               {'labels': ['N/A'], 'note': ''}     NaN   \n",
       "...                                         ...     ...   \n",
       "14450  {'labels': ['Not Distress'], 'note': ''}     NaN   \n",
       "14451  {'labels': ['Not Distress'], 'note': ''}     NaN   \n",
       "14452  {'labels': ['Not Distress'], 'note': ''}     NaN   \n",
       "14453  {'labels': ['Not Distress'], 'note': ''}     NaN   \n",
       "14454  {'labels': ['Not Distress'], 'note': ''}     NaN   \n",
       "\n",
       "                                                metadata  \n",
       "0      {'first_done_at': 1529677325000, 'last_updated...  \n",
       "1      {'first_done_at': 1529758904000, 'last_updated...  \n",
       "2      {'first_done_at': 1529688087000, 'last_updated...  \n",
       "3      {'first_done_at': 1529587470000, 'last_updated...  \n",
       "4      {'first_done_at': 1529659936000, 'last_updated...  \n",
       "...                                                  ...  \n",
       "14450  {'first_done_at': 1529646472000, 'last_updated...  \n",
       "14451  {'first_done_at': 1529670790000, 'last_updated...  \n",
       "14452  {'first_done_at': 1529669474000, 'last_updated...  \n",
       "14453  {'first_done_at': 1529601535000, 'last_updated...  \n",
       "14454  {'first_done_at': 1529589340000, 'last_updated...  \n",
       "\n",
       "[14455 rows x 4 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data = model_data\n",
    "raw_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "import keras\n",
    "from numpy import array\n",
    "from keras.preprocessing.text import one_hot\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.models import Sequential\n",
    "from keras.layers.core import Activation, Dropout, Dense\n",
    "from keras.layers import Flatten, LSTM\n",
    "from keras.layers import GlobalMaxPooling1D\n",
    "from keras.layers.embeddings import Embedding\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras.preprocessing.text import Tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 1],\n",
       "       [0, 0, 1],\n",
       "       [0, 0, 1],\n",
       "       ...,\n",
       "       [0, 1, 0],\n",
       "       [0, 1, 0],\n",
       "       [0, 1, 0]])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "import re\n",
    "from sklearn.model_selection import train_test_split\n",
    "from string import punctuation\n",
    "from collections import Counter\n",
    "import numpy as np\n",
    "\n",
    "def pad_dict_list(dict_list, padel):\n",
    "    lmax = 0\n",
    "    length = len(dict_list)\n",
    "    for lname in dict_list:\n",
    "        lmax = max(lmax, len(lname))\n",
    "    for i in range(0, length):\n",
    "        ll = len(dict_list[i])\n",
    "        if ll < lmax:\n",
    "            dict_list[i].append(padel)   \n",
    "    return dict_list\n",
    "\n",
    "def preprocess_text(sen):\n",
    "    # Removing html tags\n",
    "    sentence = remove_tags(sen)\n",
    "\n",
    "    # Remove punctuations and numbers\n",
    "    sentence = re.sub('[^a-zA-Z]', ' ', sentence)\n",
    "\n",
    "    # Single character removal\n",
    "    sentence = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', sentence)\n",
    "\n",
    "    # Removing multiple spaces\n",
    "    sentence = re.sub(r'\\s+', ' ', sentence)\n",
    "\n",
    "    return sentence\n",
    "\n",
    "TAG_RE = re.compile(r'<[^>]+>')\n",
    "\n",
    "def remove_tags(text):\n",
    "    return TAG_RE.sub('', text)\n",
    "\n",
    "titles = [re.split(\"^(.+?),\", title)[-1] for title in raw_data.content]\n",
    "X = []\n",
    "for sen in titles:\n",
    "    X.append(preprocess_text(sen))\n",
    "titles = [title.lower() for title in X]\n",
    "titles = [''.join([c for c in title if c not in punctuation]) for title in titles]\n",
    "labels = [md['labels'] for md in raw_data.annotation]\n",
    "\n",
    "labels2 = []\n",
    "\n",
    "for i in range(0, len(labels)):\n",
    "    if i:\n",
    "        labels2.append(labels[i])\n",
    "    else:\n",
    "        titles.pop(i)\n",
    "        \n",
    "labels = labels2\n",
    "\n",
    "distressed_labels = []\n",
    "not_distressed_labels = []\n",
    "na_labels = []\n",
    "\n",
    "for label in labels:\n",
    "    if \"Distress\" in label:\n",
    "        distressed_labels.append(1)\n",
    "    else:\n",
    "        distressed_labels.append(0)\n",
    "        \n",
    "    if \"Not Distress\" in label: \n",
    "        not_distressed_labels.append(1)\n",
    "    else:\n",
    "        not_distressed_labels.append(0)\n",
    "        \n",
    "    if \"N/A\" in label:\n",
    "        na_labels.append(1)\n",
    "    else:\n",
    "        na_labels.append(0)\n",
    "\n",
    "\n",
    "encoded_labels = np.array(np.column_stack((distressed_labels, not_distressed_labels, na_labels)))\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(titles, encoded_labels, test_size=0.20, random_state=42)\n",
    "encoded_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = Tokenizer(num_words=5000)\n",
    "tokenizer.fit_on_texts(X_train)\n",
    "\n",
    "X_train = tokenizer.texts_to_sequences(X_train)\n",
    "X_test = tokenizer.texts_to_sequences(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_len = max([len(i) for i in X_train])\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "\n",
    "X_train = pad_sequences(X_train, padding='post', maxlen = max_len)\n",
    "X_test = pad_sequences(X_test, padding='post', maxlen = max_len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Glove loaded.\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "  glove_file = open('glove.6B.100d.txt', encoding = \"utf8\")\n",
    "  print('Glove loaded.')\n",
    "except Exception as e:\n",
    "    print('Data load error: ',e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import array\n",
    "from numpy import asarray\n",
    "from numpy import zeros\n",
    "\n",
    "embeddings_dictionary = dict()\n",
    "\n",
    "for line in glove_file:\n",
    "    records = line.split()\n",
    "    word = records[0]\n",
    "    vector_dimensions = asarray(records[1:], dtype='float32')\n",
    "    embeddings_dictionary[word] = vector_dimensions\n",
    "glove_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "embedding_matrix = zeros((vocab_size, 100))\n",
    "for word, index in tokenizer.word_index.items():\n",
    "    embedding_vector = embeddings_dictionary.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[index] = embedding_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import array\n",
    "from keras.preprocessing.text import one_hot\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.models import Sequential\n",
    "from keras.layers.core import Activation, Dropout, Dense\n",
    "from keras.layers import Flatten, LSTM\n",
    "from keras.layers import GlobalMaxPooling1D\n",
    "from keras.models import Model\n",
    "from keras.layers.embeddings import Embedding\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.layers import Input\n",
    "from keras.layers.merge import Concatenate\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "deep_inputs = Input(shape=(max_len,))\n",
    "embedding_layer = Embedding(vocab_size, 100, weights = [embedding_matrix], trainable= False)(deep_inputs)\n",
    "LSTM_Layer_1 = LSTM(128)(embedding_layer)\n",
    "dense_layer_1 = Dense(3, activation='sigmoid')(LSTM_Layer_1)\n",
    "model = Model(inputs=deep_inputs, outputs = dense_layer_1)\n",
    "\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_5 (InputLayer)         (None, 42)                0         \n",
      "_________________________________________________________________\n",
      "embedding_5 (Embedding)      (None, 42, 100)           1459700   \n",
      "_________________________________________________________________\n",
      "lstm_5 (LSTM)                (None, 128)               117248    \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 3)                 387       \n",
      "=================================================================\n",
      "Total params: 1,577,335\n",
      "Trainable params: 117,635\n",
      "Non-trainable params: 1,459,700\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 9250 samples, validate on 2313 samples\n",
      "Epoch 1/5\n",
      "9250/9250 [==============================] - 19s 2ms/step - loss: 0.3295 - acc: 0.8685 - val_loss: 0.4546 - val_acc: 0.8122\n",
      "Epoch 2/5\n",
      "9250/9250 [==============================] - 19s 2ms/step - loss: 0.3220 - acc: 0.8721 - val_loss: 0.4485 - val_acc: 0.8154\n",
      "Epoch 3/5\n",
      "9250/9250 [==============================] - 19s 2ms/step - loss: 0.3119 - acc: 0.8788 - val_loss: 0.4519 - val_acc: 0.8125\n",
      "Epoch 4/5\n",
      "9250/9250 [==============================] - 18s 2ms/step - loss: 0.3043 - acc: 0.8835 - val_loss: 0.4568 - val_acc: 0.8189\n",
      "Epoch 5/5\n",
      "9250/9250 [==============================] - 18s 2ms/step - loss: 0.3019 - acc: 0.8823 - val_loss: 0.4757 - val_acc: 0.8128\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, batch_size=128, epochs=5, verbose=1, validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2891/2891 [==============================] - 3s 1ms/step\n",
      "Test Score: 0.4743749931150553\n",
      "Test Accuracy: 0.8149429559707642\n"
     ]
    }
   ],
   "source": [
    "score = model.evaluate(X_test, y_test, verbose=1)\n",
    "\n",
    "print(\"Test Score:\", score[0])\n",
    "print(\"Test Accuracy:\", score[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('models819.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    " \n",
    "with open('tokenizer819.pickle', 'wb') as handle:\n",
    "    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_4 (InputLayer)         (None, 42)                0         \n",
      "_________________________________________________________________\n",
      "embedding_4 (Embedding)      (None, 42, 100)           1459700   \n",
      "_________________________________________________________________\n",
      "lstm_4 (LSTM)                (None, 128)               117248    \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 3)                 387       \n",
      "=================================================================\n",
      "Total params: 1,577,335\n",
      "Trainable params: 117,635\n",
      "Non-trainable params: 1,459,700\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from numpy import loadtxt\n",
    "from keras.models import load_model\n",
    " \n",
    "# load model\n",
    "loaded_model = load_model('models2.h5')\n",
    "loaded_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2891/2891 [==============================] - 3s 1ms/step\n",
      "Test Score: 0.4446553155774684\n",
      "Test Accuracy: 0.810792088508606\n"
     ]
    }
   ],
   "source": [
    "score = loaded_model.evaluate(X_test, y_test, verbose=1)\n",
    "\n",
    "print(\"Test Score:\", score[0])\n",
    "print(\"Test Accuracy:\", score[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.7353454  0.3868029  0.77360183]]\n"
     ]
    }
   ],
   "source": [
    "with open('tokenizer.pickle', 'rb') as handle:\n",
    "    loaded_tokenizer = pickle.load(handle)\n",
    "txt=\"House of Representatives Investigate Arcelor Mittal Bad Labor Practices Allegation\"\n",
    "seq= loaded_tokenizer.texts_to_sequences([txt])\n",
    "padded = pad_sequences(seq, maxlen=max_len)\n",
    "pred = loaded_model.predict(padded)\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "if round(pred[0][0])==1:\n",
    "    distress = 1\n",
    "elif round(pred[0][2])==1:\n",
    "    distress = -1\n",
    "elif round(pred[0][1])==1:\n",
    "    distress = 0\n",
    "distress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train','test'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train','test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = Tokenizer(num_words=5000)\n",
    "tokenizer.fit_on_texts(X_train)\n",
    "\n",
    "X_train = tokenizer.texts_to_sequences(X_train)\n",
    "X_test = tokenizer.texts_to_sequences(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_len = max([len(i) for i in X_train])\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "\n",
    "X_train = pad_sequences(X_train, padding='post', maxlen = max_len)\n",
    "X_test = pad_sequences(X_test, padding='post', maxlen = max_len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Glove loaded.\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "  glove_file = fs.open('s3://your-s3-bucket-name-newsnews/glove.6B.100d.txt', encoding = \"utf8\")\n",
    "  print('Glove loaded.')\n",
    "except Exception as e:\n",
    "    print('Data load error: ',e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-59-a06582273574>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mzeros\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0membeddings_dictionary\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mglove_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0mrecords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mword\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrecords\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/s3fs/core.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1205\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1207\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1208\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1209\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/s3fs/core.py\u001b[0m in \u001b[0;36mreadline\u001b[0;34m(self, length)\u001b[0m\n\u001b[1;32m   1195\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1197\u001b[0;31m             \u001b[0mfound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcache\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb'\\n'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1198\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mlength\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mfound\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1199\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlength\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "from numpy import array\n",
    "from numpy import asarray\n",
    "from numpy import zeros\n",
    "embeddings_dictionary = dict()\n",
    "for line in glove_file:\n",
    "    records = line.split()\n",
    "    word = records[0]\n",
    "    vector_dimensions = asarray(records[1:], dtype='float32')\n",
    "    embeddings_dictionary[word] = vector_dimensions\n",
    "fs.glove_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "embedding_matrix = zeros((vocab_size, 100))\n",
    "for word, index in tokenizer.word_index.items():\n",
    "    embedding_vector = embeddings_dictionary.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        embedding_matrix[index] = embedding_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.layers import Conv1D\n",
    "\n",
    "model = Sequential()\n",
    "embedding_layer = Embedding(vocab_size, 100, weights=[embedding_matrix], input_length=max_len, trainable=False)\n",
    "model.add(embedding_layer)\n",
    "model.add(LSTM(150))\n",
    "#model.add(Flatten())\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "#model.add(Dense(1, activation='sigmoid'))\n",
    "#model.add(Conv1D(128, 5, activation='relu'))\n",
    "#model.add(GlobalMaxPooling1D())\n",
    "#model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_17 (Embedding)     (None, 42, 100)           1459700   \n",
      "_________________________________________________________________\n",
      "lstm_10 (LSTM)               (None, 150)               150600    \n",
      "_________________________________________________________________\n",
      "dense_15 (Dense)             (None, 1)                 151       \n",
      "=================================================================\n",
      "Total params: 1,610,451\n",
      "Trainable params: 150,751\n",
      "Non-trainable params: 1,459,700\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 9250 samples, validate on 2313 samples\n",
      "Epoch 1/6\n",
      "9250/9250 [==============================] - 18s 2ms/step - loss: -3.0579 - acc: 0.5245 - val_loss: -3.8745 - val_acc: 0.5313\n",
      "Epoch 2/6\n",
      "9250/9250 [==============================] - 12s 1ms/step - loss: -4.0530 - acc: 0.5245 - val_loss: -3.8745 - val_acc: 0.5313\n",
      "Epoch 3/6\n",
      "9250/9250 [==============================] - 12s 1ms/step - loss: -4.0530 - acc: 0.5245 - val_loss: -3.8745 - val_acc: 0.5313\n",
      "Epoch 4/6\n",
      "9250/9250 [==============================] - 13s 1ms/step - loss: -4.0530 - acc: 0.5245 - val_loss: -3.8745 - val_acc: 0.5313\n",
      "Epoch 5/6\n",
      "9250/9250 [==============================] - 12s 1ms/step - loss: -4.0530 - acc: 0.5245 - val_loss: -3.8745 - val_acc: 0.5313\n",
      "Epoch 6/6\n",
      "9250/9250 [==============================] - 12s 1ms/step - loss: -4.0530 - acc: 0.5245 - val_loss: -3.8745 - val_acc: 0.5313\n",
      "2891/2891 [==============================] - 2s 537us/step\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, batch_size=128, epochs=6, verbose=1, validation_split=0.2)\n",
    "score = model.evaluate(X_test, y_test, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score: 0.40677412700092286\n",
      "Test Accuracy: 0.5427187824900774\n"
     ]
    }
   ],
   "source": [
    "print(\"Test Score:\", score[0])\n",
    "print(\"Test Accuracy:\", score[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train','test'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train','test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Winnie Madikizela Mandela dies South African anti apartheid activist remained revered by ANC despite troubles\n"
     ]
    }
   ],
   "source": [
    "instance = X[57]\n",
    "print(instance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.]], dtype=float32)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "instance = tokenizer.texts_to_sequences(instance)\n",
    "\n",
    "flat_list = []\n",
    "for sublist in instance:\n",
    "    for item in sublist:\n",
    "        flat_list.append(item)\n",
    "\n",
    "flat_list = [flat_list]\n",
    "\n",
    "instance = pad_sequences(flat_list, padding='post', maxlen=max_len)\n",
    "\n",
    "model.predict(instance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "reviews_len = [len(x) for x in titles_int]\n",
    "pd.Series(reviews_len).hist()\n",
    "plt.show()\n",
    "pd.Series(reviews_len).describe()\n",
    "\n",
    "titles_int = [ titles_int[i] for i, l in enumerate(reviews_len) if l>0 ]\n",
    "encoded_labels = [ encoded_labels[i] for i, l in enumerate(reviews_len) if l> 0 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0,    0,    0, ...,    0,    0, 2934],\n",
       "       [   0,    0,    0, ..., 6172,    4, 6173],\n",
       "       [ 263,  577,  193, ..., 9147,    3,   15],\n",
       "       ...,\n",
       "       [   0,    0,    0, ...,  366,    9,  261],\n",
       "       [   0,    0,    0, ...,    3, 9126, 1487],\n",
       "       [1061, 4919,    9, ...,  400,    6,    9]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def pad_features(reviews_int, seq_length):\n",
    "    ''' Return features of review_ints, where each review is padded with 0's or truncated to the input seq_length.\n",
    "    '''\n",
    "    features = np.zeros((len(reviews_int), seq_length), dtype = int)\n",
    "    \n",
    "    for i, review in enumerate(reviews_int):\n",
    "        review_len = len(review)\n",
    "        \n",
    "        if review_len <= seq_length:\n",
    "            zeroes = list(np.zeros(seq_length-review_len))\n",
    "            new = zeroes+review\n",
    "        elif review_len > seq_length:\n",
    "            new = review[0:seq_length]\n",
    "        \n",
    "        features[i,:] = np.array(new)\n",
    "    \n",
    "    return features\n",
    "\n",
    "titles_int = pad_features(titles_int, 10)\n",
    "titles_int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "split_frac = 0.8\n",
    "len_feat = len(titles_int)\n",
    "train_x = np.array(titles_int[0:int(split_frac*len_feat)])\n",
    "train_y = np.array(encoded_labels[0:int(split_frac*len_feat)])\n",
    "remaining_x = titles_int[int(split_frac*len_feat):]\n",
    "remaining_y = encoded_labels[int(split_frac*len_feat):]\n",
    "valid_x = np.array(remaining_x[0:int(len(remaining_x)*0.5)])\n",
    "valid_y = np.array(remaining_y[0:int(len(remaining_y)*0.5)])\n",
    "test_x = np.array(remaining_x[int(len(remaining_x)*0.5):])\n",
    "test_y = np.array(remaining_y[int(len(remaining_y)*0.5):])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "# create Tensor datasets\n",
    "train_data = TensorDataset(torch.from_numpy(train_x), torch.from_numpy(train_y))\n",
    "valid_data = TensorDataset(torch.from_numpy(valid_x), torch.from_numpy(valid_y))\n",
    "test_data = TensorDataset(torch.from_numpy(test_x), torch.from_numpy(test_y))\n",
    "# dataloaders\n",
    "batch_size = 50\n",
    "# make sure to SHUFFLE your data\n",
    "train_loader = DataLoader(train_data, shuffle=True, batch_size=batch_size)\n",
    "valid_loader = DataLoader(valid_data, shuffle=True, batch_size=batch_size)\n",
    "test_loader = DataLoader(test_data, shuffle=True, batch_size=batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample input size:  torch.Size([50, 10])\n",
      "Sample input: \n",
      " tensor([[   68,   332,  1927,     2,  7519,  1934,  1805,  2042, 11881,   564],\n",
      "        [    0,     0,     0,     0,   367,     6,   594,     2,    45, 12723],\n",
      "        [    0,     0,     0,    23,   262,   545,   643, 14950,   980,    35],\n",
      "        [    0,     0,     0,     0,     0,  9820,  6541,  5068,   925,   172],\n",
      "        [  347,     3,   119,  3365,   288,  2614,  3949,   190,   278,   273],\n",
      "        [    0,     0,     0,   513,    37,  5180, 10246,   266,   286,  6403],\n",
      "        [    0,     0,     0,  1808,  4390,   884,  1891,  5388,     1,   244],\n",
      "        [    0,     0,     0,     0,     0,     0,  2059,   140, 13203,  2904],\n",
      "        [    0,     0,     0,     0, 16401,   530,   370,   643,   420,   576],\n",
      "        [    0,    39,  1263, 13195,   272,     4,   527,     5,  2459, 13196],\n",
      "        [    0,     0,     0,  1836,  3449,   683,  5343,    34,  2386,  4623],\n",
      "        [    0,     0,     0,     0,     0,     0,     0,   420,   911,   116],\n",
      "        [ 1915,   153,  1143,   330,    28,  2104,  1088,   118,    23,   521],\n",
      "        [ 6931,     8, 10734,     2,  3690,   129,  4364,   841,    28, 10735],\n",
      "        [    0,     0,     0,     0,  7709,   844,   246, 12295,    38,   182],\n",
      "        [ 8143,  5710,  2752,  1631,    17,  3704,   696,  1880,    16, 16859],\n",
      "        [    0,     0,     0,     0,    23,   140,  1998,  1344,     3,   574],\n",
      "        [   15,  8055, 16148, 16149,   369,    17,  2546,    10,    24,    89],\n",
      "        [    0,  2316,  1916,    97,     3,  4127,   192,     7,     4,   647],\n",
      "        [    0,     0,     0,   198,    23,   166,  4333,   533,  5324,    52],\n",
      "        [    0,   794,   625,  2049,   185,   712,   328,  2477,  2243,  2290],\n",
      "        [    0,     0,     0,     0, 11621,     3,  7415,    32, 11622,   184],\n",
      "        [    0,     0,    91,   759,   898,  2193,     1,  1302,   305,  4990],\n",
      "        [  194,   162,     2,  1578,  1807,     8,  3689,     1,  7752,  8374],\n",
      "        [    0,     0,  1501,   118,   870,  6748,   525,   323,  5186,  6749],\n",
      "        [    0, 12690,    62,   199,    88,   303,   400,    48,     1,   101],\n",
      "        [    0,     0,     0,    72,     1,  1683,   416,    71, 13066,    61],\n",
      "        [    0,     0,     0, 16989,    55,  8495,   519,     2, 16990,   593],\n",
      "        [ 8781,     7,  8782,    12,  3345,     1,  1642,   140,     6,   212],\n",
      "        [    0,     0,     0,     0,  6819, 10398,     1,  2647,  4268,   486],\n",
      "        [    0,     0,  4632,  2767,   457,  2283,    13,    56,     7,  6367],\n",
      "        [  115,  7324,  4490,   548,    91,  2397,     5,  4491,    76,  2400],\n",
      "        [    0,  1939,   153,   129,     5,   160,     1,  1553,  4461,  5476],\n",
      "        [ 6439,  4638,   331,    10, 15793,   219,  1361,   659,     1,   254],\n",
      "        [ 1915,   153,  1143,   330,    28,  2104,  1088,   118,    23,   521],\n",
      "        [ 1572,   131,  2564,  1324,   231,     1,   424,     2,  1662,  3277],\n",
      "        [ 4527,  4528,     1,  3175,  2235,  2798,   122,  4529,  5577,   193],\n",
      "        [ 4748,    15,   609,   648,    18,  1721,   134,  1596,     3,    19],\n",
      "        [    0,     0,  1647,    20,  1198,  1890,   344,   537,     8,  1892],\n",
      "        [ 1713,  7282,  7283,  7284,  7285,    17,  7286,  3262,   112,   180],\n",
      "        [11686,  2081,    42,  4408,   349,  5579,     7,   733,     2,  1881],\n",
      "        [    0,     0,     0,     0,     0,     0,     0,     3,    67,   232],\n",
      "        [ 1472,  3105,  1214,  2292,     8,    12, 15051,     2,  1403,     3],\n",
      "        [    0,  5623,  1115,    25,     1,   159,     5,    91,   226,   397],\n",
      "        [    0,     0,    81,   213,   196,  5904,    14,   496,   441,  4722],\n",
      "        [    0,     0,     0,     0,     0,   227,     2,    69,  2729,   185],\n",
      "        [    0,     0,     0,    47,     2,    84,   279,     6,  1394,    78],\n",
      "        [ 1641,   655,     1,  2387,   243,    16,  5705,   141,     3,   512],\n",
      "        [  157,   247,    83,   460,     6,  2582,   353,    17,  1247,     5],\n",
      "        [    0,     0,   181,  2644,  1219,  2190,   593,     1,  1977,    31]])\n",
      "\n",
      "Sample label size:  torch.Size([50])\n",
      "Sample label: \n",
      " tensor([-1, -1,  0, -1, -1,  0,  0,  0, -1,  1, -1, -1,  0,  0,  0, -1, -1,  0,\n",
      "         1,  1,  0, -1,  0,  0,  0, -1, -1,  0,  0, -1,  0,  0,  0,  0,  0, -1,\n",
      "         0, -1,  0,  0,  0, -1,  0,  0, -1,  1, -1, -1, -1,  0])\n"
     ]
    }
   ],
   "source": [
    "# obtain one batch of training data\n",
    "dataiter = iter(train_loader)\n",
    "sample_x, sample_y = dataiter.next()\n",
    "print('Sample input size: ', sample_x.size()) # batch_size, seq_length\n",
    "print('Sample input: \\n', sample_x)\n",
    "print()\n",
    "print('Sample label size: ', sample_y.size()) # batch_size\n",
    "print('Sample label: \\n', sample_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "\n",
    "#create Tensor Dataset\n",
    "train_data=TensorDataset(torch.FloatTensor(train_x), torch.FloatTensor(train_y))\n",
    "valid_data=TensorDataset(torch.FloatTensor(valid_x), torch.FloatTensor(valid_y))\n",
    "test_data=TensorDataset(torch.FloatTensor(test_x), torch.FloatTensor(test_y))\n",
    "\n",
    "#dataloader\n",
    "batch_size=50\n",
    "train_loader=DataLoader(train_data, batch_size=batch_size, shuffle=True)\n",
    "valid_loader=DataLoader(valid_data, batch_size=batch_size, shuffle=True)\n",
    "test_loader=DataLoader(test_data, batch_size=batch_size, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    " \n",
    "class SentimentalLSTM(nn.Module):\n",
    "    \"\"\"\n",
    "    The RNN model that will be used to perform Sentiment analysis.\n",
    "    \"\"\"\n",
    "    def __init__(self, vocab_size, output_size, embedding_dim, hidden_dim, n_layers, drop_prob=0.5):    \n",
    "        \"\"\"\n",
    "        Initialize the model by setting up the layers\n",
    "        \"\"\"\n",
    "        super().__init__()\n",
    "        self.output_size=output_size\n",
    "        self.n_layers=n_layers\n",
    "        self.hidden_dim=hidden_dim\n",
    "        \n",
    "        #Embedding and LSTM layers\n",
    "        self.embedding=nn.Embedding(vocab_size, embedding_dim)\n",
    "        self.lstm=nn.LSTM(embedding_dim, hidden_dim, n_layers, dropout=drop_prob, batch_first=True)\n",
    "        \n",
    "        #dropout layer\n",
    "        self.dropout=nn.Dropout(0.3)\n",
    "        \n",
    "        #Linear and sigmoid layer\n",
    "        self.fc1=nn.Linear(hidden_dim, 64)\n",
    "        self.fc2=nn.Linear(64, 16)\n",
    "        self.fc3=nn.Linear(16,output_size)\n",
    "        self.sigmoid=nn.Sigmoid()\n",
    "        \n",
    "    def forward(self, x, hidden):\n",
    "        \"\"\"\n",
    "        Perform a forward pass of our model on some input and hidden state.\n",
    "        \"\"\"\n",
    "        batch_size=x.size()\n",
    "        \n",
    "        #Embadding and LSTM output\n",
    "        embedd=self.embedding(x)\n",
    "        lstm_out, hidden=self.lstm(embedd, hidden)\n",
    "        \n",
    "        #stack up the lstm output\n",
    "        lstm_out=lstm_out.contiguous().view(-1, self.hidden_dim)\n",
    "        \n",
    "        #dropout and fully connected layers\n",
    "        out=self.dropout(lstm_out)\n",
    "        out=self.fc1(out)\n",
    "        out=self.dropout(out)\n",
    "        out=self.fc2(out)\n",
    "        out=self.dropout(out)\n",
    "        out=self.fc3(out)\n",
    "        sig_out=self.sigmoid(out)\n",
    "        \n",
    "        sig_out=sig_out.view(batch_size, -1)\n",
    "        sig_out=sig_out[:, -1]\n",
    "        \n",
    "        return sig_out, hidden\n",
    "    \n",
    "    def init_hidden(self, batch_size):\n",
    "        \"\"\"Initialize Hidden STATE\"\"\"\n",
    "        # Create two new tensors with sizes n_layers x batch_size x hidden_dim,\n",
    "        # initialized to zero, for hidden state and cell state of LSTM\n",
    "        weight = next(self.parameters()).data\n",
    "        \n",
    "        if (train_on_gpu):\n",
    "            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda(),\n",
    "                  weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda())\n",
    "        else:\n",
    "            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_(),\n",
    "                      weight.new(self.n_layers, batch_size, self.hidden_dim).zero_())\n",
    "        \n",
    "        return hidden"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SentimentalLSTM(\n",
      "  (embedding): Embedding(19159, 400)\n",
      "  (lstm): LSTM(400, 256, num_layers=2, batch_first=True, dropout=0.5)\n",
      "  (dropout): Dropout(p=0.3, inplace=False)\n",
      "  (fc1): Linear(in_features=256, out_features=64, bias=True)\n",
      "  (fc2): Linear(in_features=64, out_features=16, bias=True)\n",
      "  (fc3): Linear(in_features=16, out_features=1, bias=True)\n",
      "  (sigmoid): Sigmoid()\n",
      ")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nOutput:\\n SentimentalLSTM(   \\n(embedding): Embedding(74073, 400)   \\n(lstm): LSTM(400, 256, num_layers=2, batch_first=True, dropout=0.5)   (dropout): Dropout(p=0.3)   \\n(fc): Linear(in_features=256, out_features=1, bias=True)   (sigmoid): Sigmoid() )\\n'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Instantiate the model w/ hyperparams\n",
    "vocab_size = len(vocab_to_int)+1 # +1 for the 0 padding\n",
    "output_size = 1\n",
    "embedding_dim = 400\n",
    "hidden_dim = 256\n",
    "n_layers = 2\n",
    "\n",
    "net = SentimentalLSTM(vocab_size, output_size, embedding_dim, hidden_dim, n_layers)\n",
    "print(net)\n",
    "\n",
    "'''\n",
    "Output:\n",
    " SentimentalLSTM(   \n",
    "(embedding): Embedding(74073, 400)   \n",
    "(lstm): LSTM(400, 256, num_layers=2, batch_first=True, dropout=0.5)   (dropout): Dropout(p=0.3)   \n",
    "(fc): Linear(in_features=256, out_features=1, bias=True)   (sigmoid): Sigmoid() )\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         ...,\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.]],\n",
      "\n",
      "        [[0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         ...,\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.]]]), tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         ...,\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.]],\n",
      "\n",
      "        [[0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         ...,\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "         [0., 0., 0.,  ..., 0., 0., 0.]]]))\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": "Expected hidden[0] size (2, 45, 256), got (2, 50, 256)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-17-725781a11403>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m                 \u001b[0;31m#inputs, labels = inputs.cuda(), labels.cuda()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m                 \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_h\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_h\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m                 \u001b[0mval_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    545\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    546\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 547\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    548\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-12-9edf0452639f>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, hidden)\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;31m#Embadding and LSTM output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0membedd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m         \u001b[0mlstm_out\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlstm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membedd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0;31m#stack up the lstm output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    545\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    546\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 547\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    548\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/rnn.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, hx)\u001b[0m\n\u001b[1;32m    562\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward_packed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    563\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 564\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    565\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    566\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mGRU\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRNNBase\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/rnn.py\u001b[0m in \u001b[0;36mforward_tensor\u001b[0;34m(self, input, hx)\u001b[0m\n\u001b[1;32m    541\u001b[0m         \u001b[0munsorted_indices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 543\u001b[0;31m         \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_sizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_batch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msorted_indices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    544\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    545\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpermute_hidden\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhidden\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munsorted_indices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/rnn.py\u001b[0m in \u001b[0;36mforward_impl\u001b[0;34m(self, input, hx, batch_sizes, max_batch_size, sorted_indices)\u001b[0m\n\u001b[1;32m    521\u001b[0m             \u001b[0mhx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpermute_hidden\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msorted_indices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    522\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 523\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_forward_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_sizes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    524\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbatch_sizes\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    525\u001b[0m             result = _VF.lstm(input, hx, self._get_flat_weights(), self.bias, self.num_layers,\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/rnn.py\u001b[0m in \u001b[0;36mcheck_forward_args\u001b[0;34m(self, input, hidden, batch_sizes)\u001b[0m\n\u001b[1;32m    498\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m         self.check_hidden_size(hidden[0], expected_hidden_size,\n\u001b[0;32m--> 500\u001b[0;31m                                'Expected hidden[0] size {}, got {}')\n\u001b[0m\u001b[1;32m    501\u001b[0m         self.check_hidden_size(hidden[1], expected_hidden_size,\n\u001b[1;32m    502\u001b[0m                                'Expected hidden[1] size {}, got {}')\n",
      "\u001b[0;32m~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/nn/modules/rnn.py\u001b[0m in \u001b[0;36mcheck_hidden_size\u001b[0;34m(self, hx, expected_hidden_size, msg)\u001b[0m\n\u001b[1;32m    164\u001b[0m         \u001b[0;31m# type: (Tensor, Tuple[int, int, int], str) -> None\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    165\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mexpected_hidden_size\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 166\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexpected_hidden_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    167\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    168\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcheck_forward_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_sizes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Expected hidden[0] size (2, 45, 256), got (2, 50, 256)"
     ]
    }
   ],
   "source": [
    "# loss and optimization functions\n",
    "lr=0.001\n",
    "\n",
    "criterion = nn.BCELoss()\n",
    "optimizer = torch.optim.Adam(net.parameters(), lr=lr)\n",
    "\n",
    "# check if CUDA is available\n",
    "train_on_gpu = torch.cuda.is_available()\n",
    "# training params\n",
    "\n",
    "epochs = 3 # 3-4 is approx where I noticed the validation loss stop decreasing\n",
    "\n",
    "counter = 0\n",
    "print_every = 100\n",
    "clip=5 # gradient clipping\n",
    "\n",
    "# move model to GPU, if available\n",
    "#if(train_on_gpu):\n",
    "#    net.cuda()\n",
    "\n",
    "net.train()\n",
    "# train for some number of epochs\n",
    "for e in range(epochs):\n",
    "    # initialize hidden state\n",
    "    h = net.init_hidden(batch_size)\n",
    "    # batch loop\n",
    "    for inputs, labels in train_loader:\n",
    "        counter += 1\n",
    "\n",
    "        #if(train_on_gpu):\n",
    "        #    inputs=inputs.cuda()\n",
    "        #    labels=labels.cuda()\n",
    "        # Creating new variables for the hidden state, otherwise\n",
    "        # we'd backprop through the entire training history\n",
    "        h = tuple([each.data for each in h])\n",
    "\n",
    "        # zero accumulated gradients\n",
    "        net.zero_grad()\n",
    "\n",
    "        # get the output from the model\n",
    "        output, h = net(inputs.long(), h)\n",
    "\n",
    "        # calculate the loss and perform backprop\n",
    "        loss = criterion(output.squeeze(), labels.float())\n",
    "        loss.backward()\n",
    "        # `clip_grad_norm` helps prevent the exploding gradient problem in RNNs / LSTMs.\n",
    "        nn.utils.clip_grad_norm_(net.parameters(), clip)\n",
    "        optimizer.step()\n",
    "\n",
    "        # loss stats\n",
    "        if counter % print_every == 0:\n",
    "            # Get validation loss\n",
    "            val_h = net.init_hidden(batch_size)\n",
    "            print(val_h)\n",
    "            val_losses = []\n",
    "            net.eval()\n",
    "            for inputs, labels in valid_loader:\n",
    "\n",
    "                # Creating new variables for the hidden state, otherwise\n",
    "                # we'd backprop through the entire training history\n",
    "                val_h = tuple([each.data for each in val_h])\n",
    "\n",
    "                #inputs, labels = inputs.cuda(), labels.cuda()  \n",
    "                output, val_h = net(inputs.long(), val_h)\n",
    "                val_loss = criterion(output.squeeze(), labels.float())\n",
    "\n",
    "                val_losses.append(val_loss.item())\n",
    "\n",
    "            net.train()\n",
    "            print(\"Epoch: {}/{}...\".format(e+1, epochs),\n",
    "                  \"Step: {}...\".format(counter),\n",
    "                  \"Loss: {:.6f}...\".format(loss.item()),\n",
    "                  \"Val Loss: {:.6f}\".format(np.mean(val_losses)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:root] *",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
